cmake_minimum_required(VERSION 3.10)

get_filename_component(PROJECT_NAME ${CMAKE_SOURCE_DIR} NAME)
string(REPLACE " " "_" PROJECT_NAME ${PROJECT_NAME})
project(${PROJECT_NAME})

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# Загрузка зависимостей
include(FetchContent)

# Зависимость для HTTP-сервера
FetchContent_Declare(
    httplib
    GIT_REPOSITORY https://github.com/yhirose/cpp-httplib.git
    GIT_TAG v0.19.0
)

# Зависимость для JSON
FetchContent_Declare(
    nlohmann_json
    GIT_REPOSITORY https://github.com/nlohmann/json.git
    GIT_TAG v3.11.2
)

FetchContent_MakeAvailable(httplib nlohmann_json)

# Поиск исходников сервера
file(GLOB_RECURSE SERVER_SOURCES "src/*.cpp")
file(GLOB_RECURSE SERVER_HEADERS "include/*.h" "src/*.h")

# Исключаем client_interface.cpp из сборки сервера
list(FILTER SERVER_SOURCES EXCLUDE REGEX ".*client_interface.cpp")

# Сборка исполняемого файла сервера
add_executable(${PROJECT_NAME} ${SERVER_SOURCES} ${SERVER_HEADERS})

# Настройка путей для заголовков
target_include_directories(${PROJECT_NAME} PRIVATE 
    include 
    src 
    ${httplib_SOURCE_DIR}/include
    ${nlohmann_json_SOURCE_DIR}/include
)

# Подключение библиотек
target_link_libraries(${PROJECT_NAME} PRIVATE 
    httplib 
    ssl 
    crypto 
    nlohmann_json::nlohmann_json
)

# ==========================
# Сборка клиента
# ==========================

# Добавляем отдельный исполняемый файл для клиента
add_executable(calc_client src/client_interface.cpp)

# Указываем, где искать заголовочные файлы для клиента
target_include_directories(calc_client PRIVATE 
    include 
    src 
    ${httplib_SOURCE_DIR}/include
    ${nlohmann_json_SOURCE_DIR}/include
)

# Подключаем те же библиотеки, что и сервер
target_link_libraries(calc_client PRIVATE 
    httplib 
    ssl 
    crypto 
    nlohmann_json::nlohmann_json
)
